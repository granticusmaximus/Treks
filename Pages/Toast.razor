@using Treks.Services
@inject ToastService ToastService

<div class="toast-container position-fixed bottom-0 end-0 p-3" style="z-index: 1100;">
    @foreach (var toast in ToastService.ToastMessages)
    {
        var css = toast.Type switch
        {
            ToastType.Success => "bg-success text-white",
            ToastType.Error => "bg-danger text-white",
            ToastType.Info => "bg-info text-white",
            _ => "bg-secondary text-white"
        };

        <div class="toast show @css shadow rounded mb-2" role="alert" aria-live="assertive" aria-atomic="true">
            <div class="d-flex">
                <div class="toast-body">@toast.Message</div>
                <button type="button" class="btn-close btn-close-white me-2 m-auto"
                        @onclick="() => ToastService.RemoveToast(toast)" aria-label="Close"></button>
            </div>
        </div>
    }
</div>

@code {
    protected override void OnInitialized()
    {
        ToastService.OnToastsUpdated += RefreshToasts;
    }

    private void RefreshToasts()
    {
        InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        ToastService.OnToastsUpdated -= RefreshToasts;
    }
}