@page "/tickets/details/{TicketId}/"
@using Treks.Models
@using Treks.Services
@inject TicketService ticketService
@inject NavigationManager navi
@inject AuthenticationStateProvider AuthenticationStateProvider
@attribute [AllowAnonymous]

<h2>Ticket Details</h2>
<hr />
<div class="col-md-6">
    <NavLink class="btn btn-success" href="Tickets">
        <span aria-hidden="true">Back to Tickets</span>
    </NavLink>
    @if (!string.IsNullOrEmpty(TicketId))
    {
        var editTicketUrl = $"tickets/edit/{TicketId}";
        <NavLink class="btn btn-primary ml-2" href="@editTicketUrl">
            <span aria-hidden="true">Edit Ticket</span>
        </NavLink>
    }
</div>
<hr />
@if (_ticket != null)
{
    <div class="card">
    <div class="card-body">
        <table class="table table-hover">
            <thead>
                <tr>
                    <th scope="col">#</th>
                    <th scope="col">Severity:</th>
                    <th scope="col">Due Date:</th>
                    <th scope="col">Time Created:</th>
                    <th scope="col">Description:</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <th scope="row">@_ticket.TicketId</th>
                    <td class="@GetSeverityCssClass(_ticket.Severity.ToString()) text-uppercase text-white text-center"
                        style="font-weight: 700">@_ticket.Severity</td>
                    <td>
                        @_ticket.DueDate.ToShortDateString()
                        @if (!_ticket.isComplete)
                            {
                                var daysDifference = (_ticket.DueDate.Date - DateTime.Now.Date).Days;
                                if (daysDifference < 0)
                                {
                                    <span style="color: red;">
                                        (Overdue by @(-daysDifference) days)
                                    </span>
                                }
                                else
                                {
                                    <span style="color: green;">
                                        (@daysDifference days until due)
                                    </span>
                                }
                            }
                        </td>
                        <td>
                            @_ticket.TimeOfCreation
                        </td>
                        <td>
                            @_ticket.Description
                        </td>
                    </tr>
                </tbody>
            </table>
        </div>
    </div>
    <hr />
    @if (_ticket.TicketTechNotes != null && _ticket.TicketTechNotes.Any())
    {
        @foreach (var ticketTechNote in _ticket.TicketTechNotes)
        {
            <div class="card">
    <div class="card-header">
        <h5 class="card-title">
                        @ticketTechNote.TechNote.Username 
                    </h5>
                </div>
                <div class="card-body">
        <div class="row">
            <div class="col-lg-12">
                    <p>@ticketTechNote.TechNote.Notes</p>
            </div>
            <div class="col-2">
                <button class="btn btn-sm btn-danger" @onclick="@(() => DeleteTechNote(ticketTechNote.TechNote.Id))">
                        <span class="oi oi-trash" aria-hidden="true"></span>
                    </button>
                </div>
            </div>
    </div>
</div>
        }
    }
    else
    {
        <p>No ticket notes available.</p>
    }


    <button class="btn btn-primary mt-3" @onclick="OpenModal">Add Comment</button>

    <!-- Tech Note Modal -->
    <div class="modal fade @(showModal ? "show d-block" : "d-none")" tabindex="-1" role="dialog">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Add Comment</h5>
                    <button type="button" class="close" @onclick="CloseModal">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <div class="form-group">
                        <textarea class="form-control" @bind="newTechNotes" rows="4"></textarea>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CloseModal">Close</button>
                    <button type="button" class="btn btn-primary" @onclick="SaveTechNotes">Save Comment</button>
                </div>
            </div>
        </div>
    </div>
}
else if (!string.IsNullOrEmpty(message))
{
    <div class="alert alert-info mt-3">@message</div>
}

@code {
    [Parameter]
    public string TicketId { get; set; }
    private string message = "";
    private Ticket _ticket;
    private string newTechNotes = string.Empty;
    private bool showModal = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadTicketDetails();
    }

    private async Task LoadTicketDetails()
    {
        _ticket = await ticketService.GetTaskByIdAsync(TicketId, includeTechNotes: true);

        if (_ticket == null)
        {
            message = "There was an error with retrieving the ticket!";
        }
    }

    private void OpenModal()
    {
        showModal = true;
    }

    private void CloseModal()
    {
        showModal = false;
    }

    private async Task SaveTechNotes()
    {
        if (!string.IsNullOrWhiteSpace(newTechNotes))
        {
            var username = await GetUsernameAsync();

            var techNote = new TechNote
                {
                    Notes = newTechNotes,
                    Username = username
                };

            await ticketService.AddTechNoteToTicketAsync(TicketId, techNote);
            newTechNotes = string.Empty;
            await LoadTicketDetails();
            CloseModal();
        }
        else
        {
            message = "There was an error with saving the note!";
        }
    }

    private string GetSeverityCssClass(string severity)
    {
        switch (severity.ToLower())
        {
            case "low":
                return "bg-success"; // Green
            case "medium":
                return "bg-warning"; // Orange
            case "high":
                return "bg-danger"; // Red
            default:
                return "";
        }
    }

    private async Task DeleteTechNote(int techNoteId)
    {
        await ticketService.DeleteTechNoteAsync(techNoteId);
        await LoadTicketDetails();
    }
    private async Task<string> GetUsernameAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            return user.Identity.Name; // This will give you the username
        }
        else
        {
            return "Anonymous"; // Handle the case when the user is not authenticated
        }
    }
}
