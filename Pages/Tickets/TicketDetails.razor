@page "/tickets/details/{TicketId}/"
@using Treks.Models
@using Treks.Services
@using Treks
@using Microsoft.EntityFrameworkCore
@inject TicketService ticketService
@inject CompanyService companyService
@inject NavigationManager navi
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject Microsoft.AspNetCore.Identity.UserManager<ApplicationUser> userManager
@attribute [AllowAnonymous]

<NavLink href="/tickets" class="btn btn-secondary mb-3">
    <span aria-hidden="true">&larr;</span> Back to Tickets
</NavLink>

<h2>
    @_ticket?.Title Details
    @if (_ticket?.SubTasks?.Any() == true)
    {
        <span class="badge bg-info">@_ticket.SubTasks.Count Tasks</span>
    }
</h2>

@if (_ticket?.SubTasks?.Any() == true)
{
    <div class="progress my-2" style="height: 25px;">
        <div class="progress-bar" role="progressbar"
             style="width: @ProgressPercentage%;"
             aria-valuenow="@CompletedSubTasksCount"
             aria-valuemin="0"
             aria-valuemax="@_ticket.SubTasks.Count">
            @ProgressPercentage% Complete
        </div>
    </div>
}
else
{
    <p><strong>SubTasks:</strong> None</p>
}

<hr />

@if (_ticket != null)
{
    <div class="card">
        <div class="card-body">
            <table class="table table-hover">
                <thead>
                    <tr>
                        <th>Assigned User:</th>
                        <th>Severity:</th>
                        <th>Due Date:</th>
                        <th>Created:</th>
                        <th>Description:</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td>@_ticket.AssignedUser?.FullName</td>
                        <td class="@GetSeverityCssClass(_ticket.Severity.ToString()) text-uppercase text-white text-center" style="font-weight: 700">@_ticket.Severity</td>
                        <td>
                            @_ticket.DueDate.ToShortDateString()
                            @if (!_ticket.isComplete)
                            {
                                var daysDifference = (_ticket.DueDate.Date - DateTime.Now.Date).Days;
                                if (daysDifference < 0)
                                {
                                    <span style="color: red;">(Overdue by @(-daysDifference) days)</span>
                                }
                                else
                                {
                                    <span style="color: green;">(@daysDifference days until due)</span>
                                }
                            }
                        </td>
                        <td>@_ticket.TimeOfCreation.ToShortDateString()</td>
                        <td>@((MarkupString)_ticket.Description)</td>
                    </tr>
                </tbody>
            </table>
        </div>
    </div>

    <div class="mt-3">
        <button class="btn btn-warning" @onclick="OpenEditModal">Edit Ticket</button>
    </div>

    <!-- Edit Ticket Modal -->
    <div class="modal fade @(showEditModal ? "show d-block" : "")" tabindex="-1" role="dialog">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Edit Ticket</h5>
                    <button type="button" class="close" @onclick="CloseEditModal">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <EditForm Model="@_ticket" OnValidSubmit="UpdateTicket">
                    <div class="modal-body">
                        <div class="form-group">
                            <label for="title">Title</label>
                            <InputText id="title" class="form-control" @bind-Value="_ticket.Title" />
                        </div>

                        <div class="form-group">
                            <label for="dueDate">Due Date</label>
                            <InputDate id="dueDate" class="form-control" @bind-Value="_ticket.DueDate" />
                        </div>

                        <div class="form-group">
                            <label for="description">Description</label>
                            <TinyMCEEditor @ref="editor" UploadUrl="/api/uploads" />
                        </div>

                        <div class="form-group">
                            <label for="severity">Severity</label>
                            <InputSelect id="severity" class="form-control" @bind-Value="_ticket.Severity">
                                @foreach (var severity in Enum.GetValues<TicketSeverity>())
                                {
                                    <option value="@severity">@severity</option>
                                }
                            </InputSelect>
                        </div>

                        <div class="form-group">
                            <label for="assignedUser">Assigned User</label>
                            <InputSelect id="assignedUser" class="form-control" @bind-Value="_ticket.AssignedUserId">
                                @foreach (var user in users)
                                {
                                    <option value="@user.Id">@user.FullName</option>
                                }
                            </InputSelect>
                        </div>

                        <div class="form-group">
                            <label for="assignedCompany">Assigned Company</label>
                            <InputSelect id="assignedCompany" class="form-control" @bind-Value="_ticket.AssignedCompanyId">
                                @foreach (var company in companies)
                                {
                                    <option value="@company.Id">@company.Name</option>
                                }
                            </InputSelect>
                        </div>

                        <div class="form-group">
                            <input type="checkbox" id="isComplete" @bind="_ticket.isComplete" />
                            <label for="isComplete">Mark as Complete</label>
                        </div>
                    </div>

                    <div class="modal-footer">
                        <button type="submit" class="btn btn-primary">Save Changes</button>
                        <button type="button" class="btn btn-secondary" @onclick="CloseEditModal">Cancel</button>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>

    <hr />
    <h3>SubTasks</h3>

    @if (_ticket.SubTasks != null && _ticket.SubTasks.Any())
{
    <ul class="list-group">
        @foreach (var subtask in _ticket.SubTasks
            .OrderBy(st => st.IsComplete)
            .ThenBy(st =>
                st.DueDate.HasValue
                    ? (st.DueDate.Value.Date - DateTime.Today).Days
                    : int.MaxValue
            ))
        {
            <li class="list-group-item d-flex justify-content-between align-items-center">
                <div class="d-flex flex-column">
                    <div class="d-flex align-items-center">
                        <input type="checkbox"
                               checked="@subtask.IsComplete"
                               @onchange="@(async (e) => await ToggleSubTaskCompletion(subtask.SubTaskId, (bool)(e.Value ?? false)))" />

                        @if (editSubTaskId == subtask.SubTaskId)
                        {
                            <InputText class="form-control ms-2" style="width: 300px;"
                                       @bind-Value="editSubTaskTitle"
                                       @onblur="() => SaveEditedSubTask(subtask.SubTaskId)"
                                       @onkeypress="(e => HandleEnterKey(e, subtask.SubTaskId))" />
                        }
                        else
                        {
                            <span @ondblclick="() => BeginEditSubTask(subtask.SubTaskId, subtask.Title)" style="cursor: pointer;" class="ms-2">
                                @subtask.Title
                                <i class="oi oi-pencil ms-1" style="opacity: 0.5;"></i>
                            </span>
                        }
                    </div>

                    <div class="d-flex align-items-center mt-2">
                        <label class="me-2">Due Date:</label>

                        <InputDate @bind-Value="subtask.DueDate"
                            class="form-control"
                            style="@($"width: 180px; {GetDueDateColorStyle(subtask)}")"
                            @onchange="@(async e => await UpdateSubTaskDueDate(subtask.SubTaskId, (DateTime?)e.Value))" />

                        @if (subtask.DueDate.HasValue && !subtask.IsComplete)
                        {
                            var daysUntil = (subtask.DueDate.Value.Date - DateTime.Today).Days;
                            <small class="ms-2 fst-italic" style="@GetDueDateTextColor(subtask)">
                                @(
                                    daysUntil < 0
                                        ? $"Overdue by {Math.Abs(daysUntil)} day(s)"
                                        : daysUntil == 0
                                            ? "Due Today"
                                            : $"Due in {daysUntil} day(s)"
                                )
                            </small>
                        }
                    </div>
                </div>
            </li>
        }
    </ul>
}
    else
    {
        <p>No SubTasks for this ticket yet.</p>
    }

    <EditForm Model="@newSubTask" OnValidSubmit="AddNewSubTask" class="mt-3">
        <div class="input-group">
            <InputText class="form-control" placeholder="New SubTask Title..." @bind-Value="newSubTask.Title" />
            <div class="input-group-append">
                <button class="btn btn-primary" type="submit">Add SubTask</button>
            </div>
        </div>
    </EditForm>

    <hr />
    <h3>Comments</h3>

    @if (_ticket.TicketTechNotes != null && _ticket.TicketTechNotes.Any())
    {
        @foreach (var ticketTechNote in _ticket.TicketTechNotes)
        {
            <div class="comments mb-3">
                <div class="username font-weight-bold">
                    @ticketTechNote.TechNote?.Username
                </div>
                <div class="comment">
                    <div class="row">
                        <div class="col-lg-12">
                            @if (ticketTechNote.TechNote?.ProfilePicture != null)
                            {
                                <img src="data:image/jpeg;base64,@Convert.ToBase64String(ticketTechNote.TechNote.ProfilePicture)" width="30" height="30" class="rounded-circle" />
                            }
                            <span class="ml-2">@ticketTechNote.TechNote?.FullName</span>
                            <p class="mt-2">@((MarkupString?)ticketTechNote.TechNote?.Notes)</p>
                        </div>
                    </div>
                </div>
            </div>
        }
    }
    else
    {
        <p>No ticket notes available.</p>
    }

    <button class="btn btn-primary mt-3" @onclick="OpenCommentModal">Add Comment</button>

    <!-- Add Comment Modal -->
    <div class="modal fade @(showCommentModal ? "show d-block" : "")" tabindex="-1" role="dialog">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Add Comment</h5>
                    <button type="button" class="close" @onclick="CloseCommentModal">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <TinyMCEEditor @ref="commentEditor" UploadUrl="/api/uploads" />
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CloseCommentModal">Close</button>
                    <button type="button" class="btn btn-primary" @onclick="SaveTechNotes">Save Comment</button>
                </div>
            </div>
        </div>
    </div>
}
else if (!string.IsNullOrEmpty(message))
{
    <div class="alert alert-info mt-3">@message</div>
}

@code {
    [Parameter]
    public string TicketId { get; set; }

    private Ticket _ticket = new Ticket();
    private TinyMCEEditor? editor;
    private TinyMCEEditor? commentEditor;
    private List<ApplicationUser> users = new();
    private List<Company> companies = new();
    private bool showEditModal = false;
    private bool showCommentModal = false;
    private SubTask newSubTask = new SubTask();
    private string message = "";

    private int CompletedSubTasksCount => _ticket?.SubTasks?.Count(st => st.IsComplete) ?? 0;
    private int TotalSubTasksCount => _ticket?.SubTasks?.Count ?? 0;
    private int ProgressPercentage => TotalSubTasksCount == 0 ? 0 : (int)((double)CompletedSubTasksCount / TotalSubTasksCount * 100);

    protected override async Task OnInitializedAsync()
    {
        users = await userManager.Users.ToListAsync();
        companies = await companyService.GetAllCompaniesAsync();
        await LoadTicketDetails();
    }

    private async Task LoadTicketDetails()
    {
        _ticket = await ticketService.GetTaskByIdAsync(TicketId, includeTechNotes: true);
        if (_ticket != null)
        {
            _ticket.SubTasks = await ticketService.GetSubTasksForTicketAsync(TicketId);
        }
        else
        {
            message = "There was an error with retrieving the ticket!";
        }
    }

    private async Task UpdateTicket()
    {
        _ticket.Description = await editor!.GetContentAsync();
        await ticketService.UpdateTaskAsync(_ticket);
        CloseEditModal();
        await LoadTicketDetails();
    }

    private async Task SaveSubTasks()
    {
        foreach (var subtask in _ticket.SubTasks)
        {
            await ticketService.UpdateSubTaskCompletionAsync(subtask.SubTaskId, subtask.IsComplete);
        }
        await LoadTicketDetails();
    }

    private async Task SaveTechNotes()
    {
        var content = await commentEditor!.GetContentAsync();
        if (!string.IsNullOrWhiteSpace(content))
        {
            var userProfile = await userManager.GetUserAsync((await AuthenticationStateProvider.GetAuthenticationStateAsync()).User);

            var techNote = new TechNote
            {
                Notes = content,
                FullName = userProfile?.FullName,
                ProfilePicture = userProfile?.ProfilePicture
            };

            await ticketService.AddTechNoteToTicketAsync(TicketId, techNote);
            CloseCommentModal();
            await LoadTicketDetails();
        }
    }

    private async Task AddNewSubTask()
    {
        if (!string.IsNullOrWhiteSpace(newSubTask.Title))
        {
            await ticketService.AddSubTaskAsync(TicketId, newSubTask);
            newSubTask = new SubTask();
            await LoadTicketDetails();
        }
    }

    private async Task ToggleSubTaskCompletion(int subTaskId, bool isComplete)
    {
        await ticketService.UpdateSubTaskCompletionAsync(subTaskId, isComplete);
        await LoadTicketDetails();
    }

    private string GetSeverityCssClass(string severity)
    {
        return severity.ToLower() switch
        {
            "low" => "bg-success",
            "medium" => "bg-warning",
            "high" => "bg-danger",
            _ => ""
        };
    }

    private void OpenEditModal() => showEditModal = true;
    private void CloseEditModal() => showEditModal = false;
    private void OpenCommentModal() => showCommentModal = true;
    private void CloseCommentModal() => showCommentModal = false;

    private int? editSubTaskId = null;
    private string editSubTaskTitle = "";

    private void BeginEditSubTask(int subTaskId, string currentTitle)
    {
        editSubTaskId = subTaskId;
        editSubTaskTitle = currentTitle;
    }

    private async Task SaveEditedSubTask(int subTaskId)
    {
        if (!string.IsNullOrWhiteSpace(editSubTaskTitle))
        {
            await ticketService.UpdateSubTaskTitleAsync(subTaskId, editSubTaskTitle);
            await LoadTicketDetails();
        }
        editSubTaskId = null;
        editSubTaskTitle = "";
    }

    private async Task HandleEnterKey(KeyboardEventArgs e, int subTaskId)
    {
        if (e.Key == "Enter")
        {
            await SaveEditedSubTask(subTaskId);
        }
    }

    private async Task UpdateSubTaskDueDate(int subTaskId, DateTime? dueDate)
    {
        await ticketService.UpdateSubTaskDueDateAsync(subTaskId, dueDate);
        await LoadTicketDetails();
    }

    private string GetDueDateColorStyle(SubTask subTask)
    {
        if (!subTask.DueDate.HasValue || subTask.IsComplete) return "";

        var daysUntil = (subTask.DueDate.Value.Date - DateTime.Today).Days;
        if (daysUntil < 0)
            return "border: 1px solid red;";
        if (daysUntil <= 3)
            return "border: 1px solid orange;";
        
        return "";
    }

    private string GetDueDateTextColor(SubTask subTask)
    {
        if (!subTask.DueDate.HasValue || subTask.IsComplete) return "";

        var daysUntil = (subTask.DueDate.Value.Date - DateTime.Today).Days;
        if (daysUntil < 0)
            return "color: red;";
        if (daysUntil <= 3)
            return "color: orange;";
        
        return "color: green;";
    }
}
