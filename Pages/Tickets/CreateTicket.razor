@page "/create"
@using Treks.Models
@using Treks.Services
@inject TicketService ticketService
@inject CompanyService companyService
@inject ApplicationUserService userService
@inject NavigationManager navi
@attribute [Authorize]

<h3>Create New Ticket</h3>
<EditForm Model="@_ticket" OnValidSubmit="SaveTicket">
    <DataAnnotationsValidator />

    <div class="form-group">
        <label for="title">Title:</label>
        <InputText id="title" class="form-control" @bind-Value="_ticket.Title" />
    </div>

    <div class="form-group">
        <label for="description">Description:</label>
        <InputTextArea id="description" class="form-control" @bind-Value="_ticket.Description" />
    </div>

    <div class="form-group">
        <label for="severity">Severity:</label>
        <InputSelect id="severity" class="form-control" @bind-Value="_ticket.Severity">
            <option value="">--Select Severity--</option>
            @foreach (var severity in Enum.GetValues<TicketSeverity>())
            {
                <option value="@severity">@severity</option>
            }
        </InputSelect>
    </div>

    <div class="form-group">
        <label for="dueDate">Due Date:</label>
        <InputDate id="dueDate" class="form-control" @bind-Value="_ticket.DueDate" />
    </div>

    <div class="form-group">
        <label for="assignedUser">Assigned User:</label>
        <InputSelect id="assignedUser" class="form-control" @bind-Value="_ticket.AssignedUserId">
            <option value="">-- Select a User --</option>
            @foreach (var user in users)
            {
                <option value="@user.Id">@user.FullName</option>
            }
        </InputSelect>
    </div>

    <div class="form-group">
        <label for="assignedCompany">Assigned to a Company:</label>
        <InputSelect id="assignedCompany" class="form-control" @bind-Value="_ticket.AssignedCompanyId">
            <option value="">-- Select Company --</option>
            @foreach (var company in companies)
            {
                <option value="@company.Id">@company.Name</option>
            }
        </InputSelect>
    </div>
    <hr/>
    <button type="submit" class="btn btn-primary">Save Ticket</button>
    @if (!string.IsNullOrEmpty(message))
    {
        <div class="alert alert-info mt-3">
            @message
        </div>
    }
</EditForm>

@code {
    private Ticket _ticket = new Ticket { DueDate = DateTime.Today };
    private List<ApplicationUser> users = new List<ApplicationUser>();
    private List<Company> companies = new List<Company>();
    private string message = "";

    protected override async Task OnInitializedAsync()
    {
        users = await userService.GetAllUsersAsync();
        companies = await companyService.GetAllCompaniesAsync();
    }

    private async Task SaveTicket()
    {
        try
        {
            if (string.IsNullOrEmpty(_ticket.Title) || _ticket.AssignedCompanyId == 0)
            {
                message = "Please fill all required fields.";
                return;
            }

            _ticket.TicketId = Guid.NewGuid().ToString();
            _ticket.TimeOfCreation = DateTime.Now;
            await ticketService.CreateNewTaskAsync(_ticket);
            message = "The ticket has been created successfully!";
            ResetTicket();
        }
        catch (Exception ex)
        {
            message = $"Error creating the ticket: {ex.Message}";
        }
    }

    private void ResetTicket()
    {
        _ticket = new Ticket { DueDate = DateTime.Today };
    }
}
