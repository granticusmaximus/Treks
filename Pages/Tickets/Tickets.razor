@page "/tickets"
@using Treks.Models
@using Treks.Services
@inject TicketService ticketService
@inject NavigationManager navi
@attribute [AllowAnonymous]

<style>
    .kanban-column {
        min-height: 400px;
        background-color: #f8f9fa;
    }
</style>

<div class="container mt-4">
    <div class="text-center mb-4">
        <button @onclick="OpenAddNewTicketModal" class="btn btn-warning">Create New Task</button>
    </div>

    <div class="d-flex justify-content-around flex-wrap">
        <!-- To Do Column -->
        <div class="kanban-column border rounded p-2 m-2 flex-fill" style="min-width: 300px;">
            <h4 class="text-center">To Do</h4>
            @foreach (var task in tasksToBeCompleted.Where(t => !t.isComplete && t.DueDate > DateTime.Today))
            {
                @KanbanCard(task)
            }
        </div>

        <!-- In Progress Column -->
        <div class="kanban-column border rounded p-2 m-2 flex-fill" style="min-width: 300px;">
            <h4 class="text-center">In Progress</h4>
            @foreach (var task in tasksToBeCompleted.Where(t => !t.isComplete && t.DueDate <= DateTime.Today))
            {
                @KanbanCard(task)
            }
        </div>

        <!-- Completed Column -->
        <div class="kanban-column border rounded p-2 m-2 flex-fill" style="min-width: 300px;">
            <h4 class="text-center">Completed</h4>
            @foreach (var task in completedTasks)
            {
                @KanbanCard(task)
            }
        </div>
    </div>
</div>

<!-- Ticket Modal -->
<div class="modal fade @(showAddNewTicketModal ? "show d-block" : "")" id="addTaskModal" tabindex="-1" role="dialog">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Add New Ticket</h5>
                <button type="button" class="close" @onclick="CloseAddNewTicketModal">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <CreateTicket />
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" @onclick="CloseAddNewTicketModal">Close</button>
            </div>
        </div>
    </div>
</div>

@code {
    private List<Ticket> completedTasks = new List<Ticket>();
    private List<Ticket> tasksToBeCompleted = new List<Ticket>();
    private TicketField sortedColumn = TicketField.TicketID;
    private bool sortDescending = false;
    private bool showAddNewTicketModal = false;
    private bool showInProgressTasks = true;
    private bool showCompletedTasks = false;

    public enum TicketField
    {
        TicketID,
        AssignedUserId,
        AssignedCompanyId,
        Severity,
        DueDate
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadTickets();
    }

    private async Task LoadTickets()
    {
        var allTasks = await ticketService.GetAllTasksAsync(); // Make sure you include SubTasks in TicketService!

        completedTasks = allTasks.Where(task => task.isComplete).ToList();
        tasksToBeCompleted = allTasks.Where(task => !task.isComplete).ToList();

        SortTickets(sortedColumn);
    }

    private void SortTickets(TicketField column)
    {
        if (column == sortedColumn)
        {
            sortDescending = !sortDescending;
        }
        else
        {
            sortedColumn = column;
            sortDescending = false;
        }

        completedTasks = SortTicketsList(completedTasks, column, sortDescending);
        tasksToBeCompleted = SortTicketsList(tasksToBeCompleted, column, sortDescending);
    }

    private List<Ticket> SortTicketsList(List<Ticket> ticketList, TicketField column, bool descending)
    {
        switch (column)
        {
            case TicketField.AssignedUserId:
                return descending ? ticketList.OrderByDescending(t => t.AssignedUser?.FullName).ToList() :
                                    ticketList.OrderBy(t => t.AssignedUser?.FullName).ToList();
            case TicketField.AssignedCompanyId:
                return descending ? ticketList.OrderByDescending(t => t.AssignedCompany?.Name).ToList() :
                                    ticketList.OrderBy(t => t.AssignedCompany?.Name).ToList();
            case TicketField.Severity:
                return descending ? ticketList.OrderByDescending(t => t.Severity).ToList() :
                                    ticketList.OrderBy(t => t.Severity).ToList();
            case TicketField.DueDate:
                return descending ? ticketList.OrderByDescending(t => t.DueDate).ToList() :
                                    ticketList.OrderBy(t => t.DueDate).ToList();
            default:
                return descending ? ticketList.OrderByDescending(t => t.TicketId).ToList() :
                                    ticketList.OrderBy(t => t.TicketId).ToList();
        }
    }

    private void OpenAddNewTicketModal() => showAddNewTicketModal = true;
    private void CloseAddNewTicketModal() => showAddNewTicketModal = false;
    private void ViewTicketDetails(string ticketId) => navi.NavigateTo($"/tickets/details/{ticketId}");
    private void EditTicket(string ticketId) => navi.NavigateTo($"/tickets/edit/{ticketId}");

    private async Task DeleteTicket(string ticketId)
    {
        var confirmed = true; // Add confirmation logic if you want
        if (confirmed)
        {
            await ticketService.DeleteTaskAsync(ticketId);
            await LoadTickets();
        }
    }

    private string GetSeverityCssClass(string severity)
    {
        return severity.ToLower() switch
        {
            "low" => "bg-success",
            "medium" => "bg-warning",
            "high" => "bg-danger",
            _ => ""
        };
    }

    private RenderFragment KanbanCard(Ticket task) => __builder =>
    {
        <div class="card mb-2 shadow-sm" draggable="true" @ondragstart="e => OnDragStart(e, task.TicketId)" @ondrop="e => OnDrop(e, task.TicketId)" @ondragover="OnDragOver">
            <div class="card-body">
                <h5 class="card-title">@task.Title</h5>
                <p class="card-text">
                    <strong>Severity:</strong> @task.Severity<br />
                    <strong>User:</strong> @task.AssignedUser?.FullName ?? "Unassigned"<br />
                    <strong>Due:</strong> @task.DueDate.ToShortDateString()
                </p>
                <div class="d-flex justify-content-end">
                    <button class="btn btn-sm btn-outline-primary me-1" @onclick="() => ViewTicketDetails(task.TicketId)">
                        <span class="oi oi-eye"></span>
                    </button>
                    <button class="btn btn-sm btn-outline-warning me-1" @onclick="() => EditTicket(task.TicketId)">
                        <span class="oi oi-pencil"></span>
                    </button>
                    <button class="btn btn-sm btn-outline-danger" @onclick="() => DeleteTicket(task.TicketId)">
                        <span class="oi oi-trash"></span>
                    </button>
                </div>
            </div>
        </div>;
    };

    // Drag-and-drop handlers using JS interop for data transfer
    [Inject] private IJSRuntime JS { get; set; } = default!;

    private async void OnDragStart(DragEventArgs e, string ticketId)
    {
        await JS.InvokeVoidAsync("setDragData", ticketId);
    }

    private async Task OnDrop(DragEventArgs e, string targetTicketId)
    {
        var draggedId = await JS.InvokeAsync<string>("getDragData");

        if (!string.IsNullOrEmpty(draggedId) && draggedId != targetTicketId)
        {
            // Perform your reordering or categorization logic here
            // Example: You could move the ticket to a different status column
            Console.WriteLine($"Dragged {draggedId} over {targetTicketId}");
        }
    }

    private async Task OnDragOver(DragEventArgs e)
    {
        await JS.InvokeVoidAsync("preventDefaultWrapper", e.Type);
    }
}
<script>
    window.preventDefaultWrapper = function () {
        // This does nothing in JS but satisfies interop. PreventDefault must be handled in ondrop/onover in the DOM directly.
    };
</script>