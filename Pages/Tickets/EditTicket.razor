@page "/tickets/edit/{TicketId}/"
@using Treks.Models
@using Treks.Services
@inject CompanyService companyService
@inject TicketService ticketService
@inject ApplicationUserService applicationUserService
@inject NavigationManager navi
@attribute [Authorize]

<style>
    .select-caret {
        background: url("data:image/svg+xml,%3Csvg viewBox='0 0 140 140' xmlns='http://www.w3.org/2000/svg'%3E%3Cpolygon points='70,90 20,50 120,50' fill='%23666'/%3E%3C/svg%3E") no-repeat right 0.75rem center/1rem auto;
        appearance: none;
        padding-right: 2rem;
    }
</style>

<h3>Edit Ticket</h3>
<hr />
<div class="col-md-6">
    <NavLink class="btn btn-success" href="/tickets">
        <span aria-hidden="true">Back to Tickets</span>
    </NavLink>
</div>
<hr />
<EditForm Model="ticket" OnValidSubmit="UpdateTicket">
    <DataAnnotationsValidator />

    <div class="form-group">
        <label for="Title">Title</label>
        <InputText id="Title" @bind-Value="ticket.Title" class="form-control" />
        <ValidationMessage For="@(() => ticket.Title)" />
    </div>

    <div class="form-group">
        <label for="DueDate">Due Date</label>
        <InputDate id="DueDate" @bind-Value="ticket.DueDate" class="form-control" />
        <ValidationMessage For="@(() => ticket.DueDate)" />
    </div>

    <div class="form-group">
        <label for="Description">Description</label>
        <TinyMCEEditor @ref="editor" InitialContent="@initialContent" UploadUrl="/api/uploads" />
        <ValidationMessage For="@(() => ticket.Description)" />
    </div>

    <div class="form-group">
        <label for="Severity">Severity</label>
        <InputSelect id="Severity" class="form-control select-caret" @bind-Value="ticket.Severity">
            <option value="">--Select Option--</option>
            @foreach (var severity in Enum.GetValues<TicketSeverity>())
            {
                <option value="@severity">@severity</option>
            }
        </InputSelect>
        <ValidationMessage For="@(() => ticket.Severity)" />
    </div>

    <div class="form-group">
        <label for="AssignedUser">Assigned User</label>
        <InputSelect id="AssignedUser" class="form-control select-caret" @bind-Value="ticket.AssignedUserId">
            <option value="">-- Select User --</option>
            @foreach (var user in users)
            {
                <option value="@user.Id">@user.FullName</option>
            }
        </InputSelect>
    </div>

    <div class="form-group">
        <label for="AssignedCompany">Assigned Company</label>
        <InputSelect id="AssignedCompany" class="form-control select-caret" @bind-Value="ticket.AssignedCompanyId">
            <option value="">-- Select Company --</option>
            @foreach (var company in companies)
            {
                <option value="@company.Id">@company.Name</option>
            }
        </InputSelect>
    </div>

    <div class="form-group">
        <label for="IsComplete">Is Complete</label>
        <input type="checkbox" id="IsComplete" @bind="ticket.isComplete" />
    </div>

    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger" role="alert">@errorMessage</div>
    }

    @if (showWarning)
    {
        <div class="alert alert-warning" role="alert">Please fill in all the required fields.</div>
    }

    <button type="submit" class="btn btn-primary">Save</button>
</EditForm>

@code {
    [Parameter]
    public string? TicketId { get; set; }
    private Ticket? ticket = new();
    private TinyMCEEditor? editor;
    private string initialContent = string.Empty;
    private List<ApplicationUser> users = new();
    private List<Company> companies = new();
    private bool showWarning = false;
    private string errorMessage = "";

    protected override async Task OnInitializedAsync()
    {
        if (!string.IsNullOrEmpty(TicketId))
        {
            ticket = await ticketService.GetTaskByIdAsync(TicketId);
            initialContent = ticket?.Description ?? string.Empty;
        }

        users = await applicationUserService.GetAllUsersAsync();
        companies = await companyService.GetAllCompaniesAsync();
    }

    private async Task UpdateTicket()
    {
        showWarning = false;
        errorMessage = "";

        if (ticket == null)
            return;

        ticket.Description = await editor!.GetContentAsync();

        if (string.IsNullOrWhiteSpace(ticket.Title) ||
            string.IsNullOrWhiteSpace(ticket.Description) ||
            ticket.DueDate == default || string.IsNullOrEmpty(ticket.Severity.ToString()))
        {
            showWarning = true;
            return;
        }

        try
        {
            await ticketService.UpdateTaskAsync(ticket);
            navi.NavigateTo("/tickets");
        }
        catch (Exception)
        {
            errorMessage = "An error occurred while updating the ticket. Please try again.";
        }
    }
}
