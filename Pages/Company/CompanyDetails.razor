@page "/company/details/{id}"
@using Treks.Models
@using Treks.Services
@inject CompanyService companyService
@inject NavigationManager navigationManager


@if (company == null)
{
    <p>Loading...</p>
}
else
{
    <center>
        <div class="card">
            <div class="cardHeader"><h2>@company.Name Details</h2></div>
            <div class="cardBody">
                <strong>Contact Number:</strong> 
                <p>@company.ContactNumber</p>
                <strong>Email:</strong> 
                <p>@company.Email</p>
                <strong>Location:</strong>
                <p> @company.Address,<br/> @company.City, @company.State</p>
            </div>
            <hr/>
            <div class="cardFooter">
                <button class="btn btn-success" @onclick="NavigateToList">Back to Company List</button> &nbsp;
                @if (!string.IsNullOrEmpty(id))
                {
                    var editCompanyUrl = $"/company/edit/{id}";
                    <NavLink class="btn btn-warning ml-2" href="@editCompanyUrl">
                        <span aria-hidden="true">Edit Company</span>
                    </NavLink>
                }
            </div>
            <hr/>
        </div>
    </center>
    
}



@code {
    [Parameter]
    public string id { get; set; }
    private bool showModal = false;

    private Company company;

    private void OpenModal()
    {
        showModal = true;
    }

    private void CloseModal()
    {
        showModal = false;
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            int companyID = Convert.ToInt32(id);
            company = await companyService.GetCompanyByIdAsync(companyID);
        }
        catch (Exception)
        {
            // Handle error, such as redirecting to an error page
        }
    }

    private void NavigateToList()
    {
        navigationManager.NavigateTo("/companies");
    }
}
