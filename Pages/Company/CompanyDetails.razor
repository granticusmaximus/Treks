@page "/company/details/{id}"
@using Treks.Models
@using Treks.Services
@inject CompanyService companyService
@inject NavigationManager navigationManager

<h3>Company Details</h3>

<hr/>
    <button class="btn btn-success" @onclick="NavigateToList">Back to Company List</button>
    @if (!string.IsNullOrEmpty(id))
        {
            var editCompanyUrl = $"/company/edit/{id}";
            <NavLink class="btn btn-warning ml-2" href="@editCompanyUrl">
                <span aria-hidden="true">Edit Company</span>
            </NavLink>
        }
<hr/>

@if (company == null)
{
    <p>Loading...</p>
}
else
{
    <div>
        <p><strong>Name:</strong> @company.Name</p>
        <p><strong>Contact Number:</strong> @company.ContactNumber</p>
        <p><strong>Email:</strong> @company.Email</p>
        <p><strong>Address:</strong> @company.Address</p>
        <p><strong>City:</strong> @company.City</p>
        <p><strong>State:</strong> @company.State</p>
    </div>
}



@code {
    [Parameter]
    public string id { get; set; }

    private Company company;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            int id = Convert.ToInt32(id);
            company = await companyService.GetCompanyByIdAsync(id);
        }
        catch (Exception)
        {
            // Handle error, such as redirecting to an error page
        }
    }

    private void NavigateToList()
    {
        navigationManager.NavigateTo("/companies");
    }
}
