@page "/company/{id}/add-comment"
@using Treks.Services
@using Treks.Models
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject Microsoft.AspNetCore.Identity.UserManager<ApplicationUser> userManager
@inject CompanyService service 

<div class="row">
    <div class="col-md-6">
        <form>
            <div class="form-group">
                <label for="Comment" class="control-label">Comment</label>
                <input id="Comment" class="form-control" @bind="comment.TheComment" />
            </div>
            <hr/>
            <div class="form-group">
                <input type="button" class="btn btn-primary" @onclick="AddNewComment" value="Comment" />
            </div>
        </form>
        @if (!string.IsNullOrEmpty(message))
        {
            <div class="alert alert-info mt-3">
                @message
            </div>
        }
    </div>
</div>

@code {
    [Parameter]
    public string id { get; set; }

    private int CompanyId => !string.IsNullOrWhiteSpace(id) ? Convert.ToInt32(id) : 0;

    private Comment comment = new Comment { TheComment = "" };
    private string message = "";
    private bool success = false;
    private string newCompanyComment = string.Empty;

    private async Task AddNewComment()
    {
        if (!string.IsNullOrWhiteSpace(newCompanyComment))
        {
            var userProfile = await userManager.GetUserAsync((await AuthenticationStateProvider.GetAuthenticationStateAsync()).User);

            var newComment = new Comment
            {
                TheComment = newCompanyComment,
                ProfilePicture = userProfile?.ProfilePicture,
                FullName = userProfile?.FullName,
            };

            await service.AddCommentAsync(CompanyId, newComment);
            newCompanyComment = string.Empty;
            message = "Comment added successfully!";
        }
        else
        {
            message = "There was an error with saving the comment!";
        }
    }
}
